

--SQL Aggregate Functions [25 Exercises]

--1 SQL query to calculate total purchase amount of all orders. Return total purchase amount.
select sum(purch_amt) as sum from orders; 

--2 SQL query to calculate average purchase amount of all orders. Return average purchase amount. 
select avg(purch_amt) as avg from orders; 

--3 SQL query to count the number of unique salespeople. Return number of salespeople. 
select count(distinct salesman_id) from orders; 

--4 SQL query to count the number of customers. Return number of customers. 
select count(*) from customer;

--5 SQL query to find the number of customers who got at least a gradation for his/her activity. 
select count(all grade) from customer;

--6 SQL query to find the maximum purchase amount. 
select max(purch_amt) from orders;

--7 SQL query to find the minimum purchase amount. 
select min(purch_amt) from orders;

--8 SQL query to find the highest grade of the customers for each of the city. Return city, maximum grade.
select city, max(grade) from customer
group by city;     

--9 SQL query to find the highest purchase amount ordered by each customer. Return customer ID, maximum purchase amount.
select customer_id, max(purch_amt) from orders
group by customer_id; 

--10 SQL query to find the highest purchase amount ordered by each customer on a particular date. Return, order date and highest purchase amount. 
select customer_id, ord_date, max(purch_amt) from orders 
group by customer_id, ord_date; 

--11 SQL query to find the highest purchase amount on '2012-08-17' by each salesperson. Return salesperson ID, purchase amount.  
select salesman_id, max(purch_amt) from orders 
where ord_date = '2012-08-17' 
group by salesman_id;

--12 SQL query to find highest order (purchase) amount by each customer in a particular order date. Filter the result by highest 
--   order (purchase) amount above 2000.00. Return customer id, order date and maximum purchase amount.
select customer_id, ord_date, max(purch_amt) from orders 
group by customer_id, ord_date
having max(purch_amt)>2000.00;
 
--13 SQL query to find the maximum order (purchase) amount in the range 2000, 6000 (Begin and end values are included.) by combination 
--of each customer and order date. Return customer id, order date and maximum purchase amount.
select customer_id, ord_date, max(purch_amt) from orders  
group by customer_id, ord_date 
having max(purch_amt) between 2000 and 6000; 

--14 SQL query to find the maximum order (purchase) amount by the combination of each customer and order date. Filter the rows for 
--maximum order (purchase) amount is either 2000, 3000, 5760, 6000. Return customer id, order date and maximum purchase amount
select customer_id, ord_date, max(purch_amt) from orders 
group by customer_id, ord_date 
having max(purch_amt) in (2000, 3000, 5760, 6000); 

--15 SQL query to find the maximum order (purchase) amount by each customer. The customer ID should be in the range 3002 and 3007
--(Begin and end values are included.). Return customer id and maximum purchase amount.

select customer_id, max(purch_amt) from orders 
where customer_id between 3002 and 3007 
group by customer_id;

--16 find the maximum order (purchase) amount for each customer. The customer ID should be in the range 3002 and 3007(Begin and end values are included.). 
--Filter the rows for maximum order (purchase) amount is higher than 1000. Return customer id and maximum purchase amount

select customer_id, max(purch_amt) from orders 
where customer_id between 3002 and 3007 
group by customer_id
having max(purch_amt)>1000 ; 

--17 SQL query to find the maximum order (purchase) amount generated by each salesperson. Filter the rows for the salesperson 
--ID is in the range 5003 and 5008 (Begin and end values are included.). Return salesperson id and maximum purchase amount.

select salesman_id, max(purch_amt) from orders 
group by salesman_id
having salesman_id between 5003 and 5008;
--or
--where salesman_id between 5003 and 5008 
--group by salesman_id; 

--18 SQL query to count all the orders generated on '2012-08-17'. Return number of orders. 
select count(*) from orders 
where ord_date='2012-08-17'; 

--19 SQL query to count number of salespeople who belongs to a city. Return number of salespeople 
select count(*) from salesman
where city is not null;

--20 SQL query to count number of orders by the combination of each order date and salesperson. Return order date, salesperson id. 
select ord_date, salesman_id, count(*) from orders 
group by ord_date, salesman_id;  

--21 SQL query to calculate the average product price. Return average product price.  
select avg(pro_price) as 'Average Price' from item_mast;

--22 SQL query to count number of products where product price is higher than or equal to 350. Return number of products. 
select count(*) from item_mast
where PRO_PRICE >= 350; 

--23 SQL query to compute the average price for unique companies. Return average price and company id. 
select avg(pro_price) as 'Average Price' ,pro_com from item_mast
group by pro_com; 

--24 SQL query to compute the sum of the allotment amount of all departments. Return sum of the allotment amount. 
create table emp_department( 
dpt_code int, dpt_name varchar(50), dpt_allotment int);

insert into emp_department(dpt_code, dpt_name, dpt_allotment) 
values(57, 'IT', 65000),
      (63, 'Finance', 15000),
      (47, 'HR', 240000),
      (27, 'RD', 55000),
      (89, 'QC', 75000);

select sum(dpt_allotment) from emp_department;

--25 SQL query to find the number of employees in each department. Return department code and number of employees. 
select emp_dept, count(*) from emp_details
group by EMP_DEPT;
